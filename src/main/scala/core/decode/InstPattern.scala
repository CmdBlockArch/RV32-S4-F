package core.decode

import chisel3.util.BitPat
import chisel3.util.experimental.decode._
import scala.collection.mutable.ArrayBuffer

case class InstPattern(s: String) extends DecodePattern {
  override def bitPat = BitPat("b" + s)

  def inst = bitPat(31, 0)
  def opcode = bitPat(6, 0)
  def func7 = bitPat(31, 25)
  def func5 = bitPat(31, 27)
  def func3 = bitPat(14, 12)
}

object InstPattern {
  private val patternList = new ArrayBuffer[InstPattern]
  def ip(s: String): InstPattern = {
    val t = InstPattern(s)
    patternList += t
    t
  }
  def seq = patternList.toSeq

  // RV32I
  val lui    = ip("??????? ????? ????? ??? ????? 01101 11")
  val auipc  = ip("??????? ????? ????? ??? ????? 00101 11")
  val jal    = ip("??????? ????? ????? ??? ????? 11011 11")
  val jalr   = ip("??????? ????? ????? 000 ????? 11001 11")
  val beq    = ip("??????? ????? ????? 000 ????? 11000 11")
  val bne    = ip("??????? ????? ????? 001 ????? 11000 11")
  val blt    = ip("??????? ????? ????? 100 ????? 11000 11")
  val bge    = ip("??????? ????? ????? 101 ????? 11000 11")
  val bltu   = ip("??????? ????? ????? 110 ????? 11000 11")
  val bgeu   = ip("??????? ????? ????? 111 ????? 11000 11")
  val lb     = ip("??????? ????? ????? 000 ????? 00000 11")
  val lh     = ip("??????? ????? ????? 001 ????? 00000 11")
  val lw     = ip("??????? ????? ????? 010 ????? 00000 11")
  val lbu    = ip("??????? ????? ????? 100 ????? 00000 11")
  val lhu    = ip("??????? ????? ????? 101 ????? 00000 11")
  val sb     = ip("??????? ????? ????? 000 ????? 01000 11")
  val sh     = ip("??????? ????? ????? 001 ????? 01000 11")
  val sw     = ip("??????? ????? ????? 010 ????? 01000 11")
  val addi   = ip("??????? ????? ????? 000 ????? 00100 11")
  val slti   = ip("??????? ????? ????? 010 ????? 00100 11")
  val sltiu  = ip("??????? ????? ????? 011 ????? 00100 11")
  val xori   = ip("??????? ????? ????? 100 ????? 00100 11")
  val ori    = ip("??????? ????? ????? 110 ????? 00100 11")
  val andi   = ip("??????? ????? ????? 111 ????? 00100 11")
  val slli   = ip("0000000 ????? ????? 001 ????? 00100 11")
  val srli   = ip("0000000 ????? ????? 101 ????? 00100 11")
  val srai   = ip("0100000 ????? ????? 101 ????? 00100 11")
  val add    = ip("0000000 ????? ????? 000 ????? 01100 11")
  val sub    = ip("0100000 ????? ????? 000 ????? 01100 11")
  val sll    = ip("0000000 ????? ????? 001 ????? 01100 11")
  val slt    = ip("0000000 ????? ????? 010 ????? 01100 11")
  val sltu   = ip("0000000 ????? ????? 011 ????? 01100 11")
  val xor    = ip("0000000 ????? ????? 100 ????? 01100 11")
  val srl    = ip("0000000 ????? ????? 101 ????? 01100 11")
  val sra    = ip("0100000 ????? ????? 101 ????? 01100 11")
  val or     = ip("0000000 ????? ????? 110 ????? 01100 11")
  val and    = ip("0000000 ????? ????? 111 ????? 01100 11")
  // RV32M
  val mul    = ip("0000001 ????? ????? 000 ????? 01100 11")
  val mulh   = ip("0000001 ????? ????? 001 ????? 01100 11")
  val mulhsu = ip("0000001 ????? ????? 010 ????? 01100 11")
  val mulhu  = ip("0000001 ????? ????? 011 ????? 01100 11")
  val div    = ip("0000001 ????? ????? 100 ????? 01100 11")
  val divu   = ip("0000001 ????? ????? 101 ????? 01100 11")
  val rem    = ip("0000001 ????? ????? 110 ????? 01100 11")
  val remu   = ip("0000001 ????? ????? 111 ????? 01100 11")
  // CSR
  val csrrw  = ip("??????? ????? ????? 001 ????? 11100 11")
  val csrrs  = ip("??????? ????? ????? 010 ????? 11100 11")
  val csrrc  = ip("??????? ????? ????? 011 ????? 11100 11")
  val csrrwi = ip("??????? ????? ????? 101 ????? 11100 11")
  val csrrsi = ip("??????? ????? ????? 110 ????? 11100 11")
  val csrrci = ip("??????? ????? ????? 111 ????? 11100 11")
  // SYS
  val ecall  = ip("0000000 00000 00000 000 00000 11100 11")
  val ebreak = ip("0000000 00001 00000 000 00000 11100 11")
  val mret   = ip("0011000 00010 00000 000 00000 11100 11")
  val sret   = ip("0001000 00010 00000 000 00000 11100 11")
  val wfi    = ip("0001000 00101 00000 000 00000 11100 11")
  val sfcvma = ip("0001001 ????? ????? 000 00000 11100 11")
  // FENCE
  val fence  = ip("??????? ????? ????? 000 ????? 00011 11")
  val fencei = ip("??????? ????? ????? 001 ????? 00011 11")
  // RV32A
  val lr     = ip("00010?? 00000 ????? 010 ????? 01011 11")
  val sc     = ip("00011?? ????? ????? 010 ????? 01011 11")
  val amoswap = ip("00001?? ????? ????? 010 ????? 01011 11")
  val amoadd  = ip("00000?? ????? ????? 010 ????? 01011 11")
  val amoxor  = ip("00100?? ????? ????? 010 ????? 01011 11")
  val amoand  = ip("01100?? ????? ????? 010 ????? 01011 11")
  val amoor   = ip("01000?? ????? ????? 010 ????? 01011 11")
  val amomin  = ip("10000?? ????? ????? 010 ????? 01011 11")
  val amomax  = ip("10100?? ????? ????? 010 ????? 01011 11")
  val amominu = ip("11000?? ????? ????? 010 ????? 01011 11")
  val amomaxu = ip("11100?? ????? ????? 010 ????? 01011 11")
}
